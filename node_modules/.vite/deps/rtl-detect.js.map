{
  "version": 3,
  "sources": ["../../rtl-detect/lib/rtl-detect.js", "../../rtl-detect/index.js"],
  "sourcesContent": ["/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\n\nvar self;\nvar RtlDetectLib = self = {  // eslint-disable-line consistent-this\n    // Private vars - star\n    _regexEscape: /([\\.\\*\\+\\^\\$\\[\\]\\\\\\(\\)\\|\\{\\}\\,\\-\\:\\?])/g, // eslint-disable-line no-useless-escape\n    _regexParseLocale: /^([a-zA-Z]*)([_\\-a-zA-Z]*)$/,\n    // Private vars - end\n\n    // Private functions - star\n    _escapeRegExpPattern: function (str) {\n        if (typeof str !== 'string') {\n            return str;\n        }\n        return str.replace(self._regexEscape, '\\\\$1');\n    },\n\n    _toLowerCase: function (str, reserveReturnValue) {\n        if (typeof str !== 'string') {\n            return reserveReturnValue && str;\n        }\n        return str.toLowerCase();\n    },\n\n    _toUpperCase: function (str, reserveReturnValue) {\n        if (typeof str !== 'string') {\n            return reserveReturnValue && str;\n        }\n        return str.toUpperCase();\n    },\n\n    _trim: function (str, delimiter, reserveReturnValue) {\n        var patterns = [];\n        var regexp;\n        var addPatterns = function (pattern) {\n            // Build trim RegExp pattern and push it to patterns array\n            patterns.push('^' + pattern + '+|' + pattern + '+$');\n        };\n\n        // fix reserveReturnValue value\n        if (typeof delimiter === 'boolean') {\n            reserveReturnValue = delimiter;\n            delimiter = null;\n        }\n\n        if (typeof str !== 'string') {\n            return reserveReturnValue && str;\n        }\n\n        // Trim based on delimiter array values\n        if (Array.isArray(delimiter)) {\n            // Loop through delimiter array\n            delimiter.map(function (item) {\n                // Escape delimiter to be valid RegExp Pattern\n                var pattern = self._escapeRegExpPattern(item);\n                // Push pattern to patterns array\n                addPatterns(pattern);\n            });\n        }\n\n        // Trim based on delimiter string value\n        if (typeof delimiter === 'string') {\n            // Escape delimiter to be valid RegExp Pattern\n            var patternDelimiter = self._escapeRegExpPattern(delimiter);\n            // push pattern to patterns array\n            addPatterns(patternDelimiter);\n        }\n\n        // If delimiter  is not defined, Trim white spaces\n        if (!delimiter) {\n            // Push white space pattern to patterns array\n            addPatterns('\\\\s');\n        }\n\n        // Build RegExp pattern\n        var pattern = '(' + patterns.join('|') + ')';\n        // Build RegExp object\n        regexp = new RegExp(pattern, 'g');\n\n        // trim string for all patterns\n        while (str.match(regexp)) {\n            str = str.replace(regexp, '');\n        }\n\n        // Return trim string\n        return str;\n    },\n\n    _parseLocale : function (strLocale) {\n        var matches =  self._regexParseLocale.exec(strLocale); // exec regex\n        var parsedLocale;\n        var lang;\n        var countryCode;\n\n        if (!strLocale || !matches) {\n            return;\n        }\n\n        // fix countryCode string by trimming '-' and '_'\n        matches[2] = self._trim(matches[2], ['-', '_']);\n\n        lang = self._toLowerCase(matches[1]);\n        countryCode = self._toUpperCase(matches[2]) || countryCode;\n\n        // object with lang, countryCode properties\n        parsedLocale = {\n            lang: lang,\n            countryCode: countryCode\n        };\n\n        // return parsed locale object\n        return parsedLocale;\n    },\n    // Private functions - End\n\n    // Public functions - star\n    isRtlLang: function (strLocale) {\n        var objLocale = self._parseLocale(strLocale);\n        if (!objLocale) {\n            return;\n        }\n        // return true if the intel string lang exists in the BID RTL LANGS array else return false\n        return (self._BIDI_RTL_LANGS.indexOf(objLocale.lang) >= 0);\n    },\n\n    getLangDir: function (strLocale) {\n        // return 'rtl' if the intel string lang exists in the BID RTL LANGS array else return 'ltr'\n        return self.isRtlLang(strLocale) ? 'rtl' : 'ltr';\n    }\n\n    // Public functions - End\n};\n\n// Const BIDI_RTL_LANGS Array\n// BIDI_RTL_LANGS ref: http://en.wikipedia.org/wiki/Right-to-left\n// Table of scripts in Unicode: https://en.wikipedia.org/wiki/Script_(Unicode)\nObject.defineProperty(self, '_BIDI_RTL_LANGS', {\n    value: [\n        'ae',\t/* Avestan */\n        'ar',   /* 'العربية', Arabic */\n        'arc',  /* Aramaic */\n        'bcc',  /* 'بلوچی مکرانی', Southern Balochi */\n        'bqi',  /* 'بختياري', Bakthiari */\n        'ckb',  /* 'Soranî / کوردی', Sorani */\n        'dv',   /* Dhivehi */\n        'fa',   /* 'فارسی', Persian */\n        'glk',  /* 'گیلکی', Gilaki */\n        'he',   /* 'עברית', Hebrew */\n        'ku',   /* 'Kurdî / كوردی', Kurdish */\n        'mzn',  /* 'مازِرونی', Mazanderani */\n        'nqo',  /* N'Ko */\n        'pnb',  /* 'پنجابی', Western Punjabi */\n        'prs',  /* 'دری', Darī */\n        'ps',   /* 'پښتو', Pashto, */\n        'sd',   /* 'سنڌي', Sindhi */\n        'ug',   /* 'Uyghurche / ئۇيغۇرچە', Uyghur */\n        'ur',    /* 'اردو', Urdu */\n        'yi'    /* 'ייִדיש', Yiddish */\n    ],\n    writable: false,\n    enumerable: true,\n    configurable: false\n});\n\n\nmodule.exports = RtlDetectLib;\n", "/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\n'use strict';\n\nvar rtlDetect = require('./lib/rtl-detect');\n\nmodule.exports = {\n\n    isRtlLang: rtlDetect.isRtlLang,\n\n    getLangDir: rtlDetect.getLangDir\n\n};\n"],
  "mappings": "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",
  "names": ["pattern", "require_rtl_detect"]
}
